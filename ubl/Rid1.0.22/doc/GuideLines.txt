This document describes the definitions and usage of the RFS Holding integration schema's, from now on to be called Rfs schemas.

These Rfs schemas are used to define the message between different logical domains and systems, both for intra-company and exta-company integration.
Defined within a xsd, the Rfs schemas can be used to validate the xml messages, using standard functionality in todays integration systems.

The Rfs schemas are based on an international standerd, the UBL schemas, as defined by oasis (http://www.oasis.org/), as a subset in such a way that the result is UBL compliant, like the NES schemas (Northern European Subset, http://www.nesubl.eu). So Rfs messages are allways UBL compliant, but UBL message may not be Rfs compliant (although it should be rather simple to make them Rfs compliant). When information that is not part of UBL set needs to be stored, the extension possibilities of UBL are used.

Like NES, the Rfs schemas are organised in profile's. Each profile contains exactly the subset of UBL messages that is needed to fulfil the needs for that profile. A very important profile is the Rid (Rfs Integration Dataschema) profile. This profile is used to define the messages that are used on the intercompany ESB.

Within each profile, the UBL structure is copied and simplified. So messages are always independed of each other. All components, datatypes and codelists (lists of predefined values) are stored in a seperate location. Within a message only aggregated and basic components are referred to. Whenever a shared xsd needs to be extended with a new type or element, it is stored in a seperate file, as an extension to the UBL set. Although the xsd files could be self-describing, the definition of the messages is stored in a seperate spreadsheet. 

Extensions to a message are, by UBL definition, stored in the extension segment of the message. This extension segment has no validation for the content because it is of the <any> type. In order to be able to validate this extension content, each message that contains an extension, has a seperate message with the definition of that content, so it is possible to validate it with a schema.

The file location of the Rfs schemas:
/Rfs.Integration.Schemas/[Schemaprofile]/common		contains the common schema files
/Rfs.Integration.Schemas/[Schemaprofile]/doc		contains describing documents
/Rfs.Integration.Schemas/[Schemaprofile]/maindoc	contains the messages
/Rfs.Integration.Schemas/[Schemaprofile]/xlsx		contains the spreadsheets with definition

The organisation is also reflected in the namespace definition, used in the xsd's:
http://schemas.rfsholding.com/[schemaprofile]/[MessageName]/v[version.subversion];
example:
http:/schemas.rfsholding.com/rid/SalesOrder/v1.0

And the filename of a message and spreadsheet:
[Schemaprofile]-[MessageName]-v[version].[subversion].xsd
example:
Rid-SalesOrder-v1.0.xsd
Rid-SalesOrder-v1.0.xlsx

For extensions the files have a comparible naming convention (the extension is described in the normal spreadsheet):
[Schemaprofile]-Extended[MessageName]-v[version].[subversion].xsd
example:
Rid-ExtendedSalesOrder-v1.0.xsd

For the common files, the extensions are stored in a comparible way:
[Schemaprofile]-Extended[OriginalName]-v[version].[subversion].xsd
example:
Rid-ExtendedCommonBasicComponents-v1.0.xsd

Subsetting UBL means that within a message elements can be removed that are optional. Cardinality can be narrowed down in the following way:
0..n => 1..n
0..n => 1..1
0..n => m..n
1..n => 1..1
1..n => m..n
0..1 => 1

When a message does not exist in Ubl 2.0, but something similar exists in Ubl 2.1, then a message definition can be taken from Ubl 2.1 and altered to a usefull message. If nothing similar exists, a new message can be created from, preferably by using the Ubl 2.0 common basic & aggregate components.

Extra aggregate or basic elements can be created, to be used in new message types or in the extension section, in a seperate set of extension schemas. These elements should be constructed from the Ubl common elements where possible. The custom elements are stored in:
- [Schemaprofile]-ExtendedCommonBasicComponents-v1.0.xsd for basic elements
- [Schemaprofile]-ExtendedCommonAggregatedComponents-v1.0.xsd for aggregated elements

Each xsd uses the utf-8 codepage.

Imported structures should have the following prefixes:
xmlns:udt="http://schemas.rfsholding.com/[schemaprofile]/UnqualifiedDataTypes/v1.0" 
xmlns:qdt="http://schemas.rfsholding.com/[schemaprofile]/QualifiedDataTypes/v1.0" 
xmlns:ext="http://schemas.rfsholding.com/[schemaprofile]/CommonExtensionComponents/v1.0"
xmlns:cbc="http://schemas.rfsholding.com/[schemaprofile]/CommonBasicComponents/v1.0" 
xmlns:cac="http://schemas.rfsholding.com/[schemaprofile]/CommonAggregateComponents/v1.0" 
xmlns:ecbc="http://schemas.rfsholding.com/[schemaprofile]/ExtendedCommonBasicComponents/v1.0" 
xmlns:ecac="http://schemas.rfsholding.com/[schemaprofile]/ExtendedCommonAggregateComponents/v1.0" 
xmlns:ccts="urn:un:unece:uncefact:documentation:2"

with the following import:
<xsd:import schemaLocation="../common/[Schemaprofile]-UnqualifiedDataTypes-v1.0.xsd" namespace="http://schemas.rfsholding.com/[schemaprofile]/UnqualifiedDataTypes/v1.0" />
<xsd:import schemaLocation="../common/[Schemaprofile]-QualifiedDataTypes-v1.0.xsd" namespace="http://schemas.rfsholding.com/[schemaprofile]/QualifiedDataTypes/v1.0" />
<xsd:import schemaLocation="../common/[Schemaprofile]-CommonExtensionComponents-v1.0.xsd" namespace="http://schemas.rfsholding.com/[schemaprofile]/CommonExtensionComponents/v1.0" />
<xsd:import schemaLocation="../common/[Schemaprofile]-CommonBasicComponents-v1.0.xsd" namespace="http://schemas.rfsholding.com/[schemaprofile]/CommonBasicComponents/v1.0" />
<xsd:import schemaLocation="../common/[Schemaprofile]-CommonAggregateComponents-v1.0.xsd" namespace="http://schemas.rfsholding.com/[schemaprofile]/CommonAggregateComponents/v1.0" />
<xsd:import schemaLocation="../common/[Schemaprofile]-ExtendedCommonBasicComponents-v1.0.xsd" namespace="http://schemas.rfsholding.com/[schemaprofile]/ExtendedCommonBasicComponents/v1.0" />
<xsd:import schemaLocation="../common/[Schemaprofile]-ExtendedCommonAggregateComponents-v1.0.xsd" namespace="http://schemas.rfsholding.com/[schemaprofile]/ExtendedCommonAggregateComponents/v1.0" />

The prefixes should be the same in each file and description, so uniformity is maintained. Within the describing spreadsheets, at least one sheet reflects the xsd hierarchy. Within this hierarchy all elements should be a cac or cbc (ecac or ecbc for extensions) where every hierarchical structure should end in a cbc. For some cbc elements a specific property is required (example: cbc:Quantity => udt:UnitCode). Requiered properties are defined at the same level as the element.

Some simple checks:
- each hierachical structure in the spreadsheets ends with a cbc element or with a property.
- every extension to UBL is stored in a file with the [schemaprofile]-Extended[originalname]-v[version].[subversion].xsd signature.
- messages only refer to cbc or cac elements.
- extended messages only refer to cbc, cac, ecbc and ecac elements.
  
